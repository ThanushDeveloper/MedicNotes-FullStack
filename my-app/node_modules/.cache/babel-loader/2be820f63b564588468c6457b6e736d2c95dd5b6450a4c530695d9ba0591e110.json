{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{BrowserRouter as Router,Routes,Route,Navigate}from\"react-router-dom\";import Home from\"./components/Home\";import Login from\"./components/Login\";import AdminDashboard from\"./components/AdminDashboard\";import DoctorDashboard from\"./components/DoctorDashboard\";import PatientDashboard from\"./components/PatientDashboard\";import\"@fortawesome/fontawesome-free/css/all.min.css\";// Protected Route Component\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ProtectedRoute=_ref=>{let{children,requiredRole,userRole,isAuthenticated}=_ref;if(!isAuthenticated){return/*#__PURE__*/_jsx(Navigate,{to:\"/login\",replace:true});}if(requiredRole&&userRole!==requiredRole){// Redirect to appropriate dashboard based on user's actual role\nswitch(userRole){case\"ADMIN\":return/*#__PURE__*/_jsx(Navigate,{to:\"/admin/dashboard\",replace:true});case\"DOCTOR\":return/*#__PURE__*/_jsx(Navigate,{to:\"/doctor/dashboard\",replace:true});case\"PATIENT\":return/*#__PURE__*/_jsx(Navigate,{to:\"/patient/dashboard\",replace:true});default:return/*#__PURE__*/_jsx(Navigate,{to:\"/login\",replace:true});}}return children;};function App(){const[auth,setAuth]=useState({isAuthenticated:false,role:null,username:\"\",user:null// Complete user profile data\n});// Centralized logout function\nconst handleLogout=()=>{console.log('App: handleLogout called');try{// Clear all localStorage data\nlocalStorage.clear();console.log('App: localStorage cleared');// Reset auth state\nsetAuth({isAuthenticated:false,role:null,username:\"\",user:null});console.log('App: Auth state reset');}catch(error){console.error('App: Error during logout:',error);}};// Check for existing authentication on app load\nuseEffect(()=>{const token=localStorage.getItem('authToken');const userSession=localStorage.getItem('userSession');if(token&&userSession){try{const user=JSON.parse(userSession);setAuth({isAuthenticated:true,role:user.role,username:user.username,user:user});}catch(error){// Clear invalid session data and logout\nhandleLogout();}}},[]);return/*#__PURE__*/_jsx(Router,{children:/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(Home,{})}),/*#__PURE__*/_jsx(Route,{path:\"/login\",element:auth.isAuthenticated?/*#__PURE__*/// Redirect authenticated users to their dashboard\n_jsx(Navigate,{to:`/${auth.role.toLowerCase()}/dashboard`,replace:true}):/*#__PURE__*/_jsx(Login,{setAuth:setAuth})}),/*#__PURE__*/_jsx(Route,{path:\"/admin/dashboard\",element:/*#__PURE__*/_jsx(ProtectedRoute,{requiredRole:\"ADMIN\",userRole:auth.role,isAuthenticated:auth.isAuthenticated,children:/*#__PURE__*/_jsx(AdminDashboard,{auth:auth,setAuth:setAuth,onLogout:handleLogout})})}),/*#__PURE__*/_jsx(Route,{path:\"/doctor/dashboard\",element:/*#__PURE__*/_jsx(ProtectedRoute,{requiredRole:\"DOCTOR\",userRole:auth.role,isAuthenticated:auth.isAuthenticated,children:/*#__PURE__*/_jsx(DoctorDashboard,{auth:auth,setAuth:setAuth,onLogout:handleLogout})})}),/*#__PURE__*/_jsx(Route,{path:\"/patient/dashboard\",element:/*#__PURE__*/_jsx(ProtectedRoute,{requiredRole:\"PATIENT\",userRole:auth.role,isAuthenticated:auth.isAuthenticated,children:/*#__PURE__*/_jsx(PatientDashboard,{auth:auth,setAuth:setAuth,onLogout:handleLogout})})}),/*#__PURE__*/_jsx(Route,{path:\"*\",element:/*#__PURE__*/_jsx(Navigate,{to:\"/\",replace:true})})]})});}export default App;","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","Navigate","Home","Login","AdminDashboard","DoctorDashboard","PatientDashboard","jsx","_jsx","jsxs","_jsxs","ProtectedRoute","_ref","children","requiredRole","userRole","isAuthenticated","to","replace","App","auth","setAuth","role","username","user","handleLogout","console","log","localStorage","clear","error","token","getItem","userSession","JSON","parse","path","element","toLowerCase","onLogout"],"sources":["/workspace/my-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Routes, Route, Navigate } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport Login from \"./components/Login\";\nimport AdminDashboard from \"./components/AdminDashboard\";\nimport DoctorDashboard from \"./components/DoctorDashboard\";\nimport PatientDashboard from \"./components/PatientDashboard\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\n\n// Protected Route Component\nconst ProtectedRoute = ({ children, requiredRole, userRole, isAuthenticated }) => {\n  if (!isAuthenticated) {\n    return <Navigate to=\"/login\" replace />;\n\n  }\n  \n  if (requiredRole && userRole !== requiredRole) {\n    // Redirect to appropriate dashboard based on user's actual role\n    switch (userRole) {\n      case \"ADMIN\":\n        return <Navigate to=\"/admin/dashboard\" replace />;\n      case \"DOCTOR\":\n        return <Navigate to=\"/doctor/dashboard\" replace />;\n      case \"PATIENT\":\n        return <Navigate to=\"/patient/dashboard\" replace />;\n      default:\n        return <Navigate to=\"/login\" replace />;\n    }\n  }\n  \n  return children;\n};\n\nfunction App() {\n  const [auth, setAuth] = useState({\n    isAuthenticated: false,\n    role: null,\n    username: \"\",\n    user: null, // Complete user profile data\n  });\n\n  // Centralized logout function\n  const handleLogout = () => {\n    console.log('App: handleLogout called');\n    try {\n      // Clear all localStorage data\n      localStorage.clear();\n      console.log('App: localStorage cleared');\n  \n      // Reset auth state\n      setAuth({\n        isAuthenticated: false,\n        role: null,\n        username: \"\",\n        user: null,\n      });\n      console.log('App: Auth state reset');\n    } catch (error) {\n      console.error('App: Error during logout:', error);\n    }\n\n  };\n\n\n  // Check for existing authentication on app load\n  useEffect(() => {\n    const token = localStorage.getItem('authToken');\n    const userSession = localStorage.getItem('userSession');\n    \n    if (token && userSession) {\n      try {\n        const user = JSON.parse(userSession);\n        setAuth({\n          isAuthenticated: true,\n          role: user.role,\n          username: user.username,\n          user: user,\n        });\n      } catch (error) {\n        // Clear invalid session data and logout\n        handleLogout();\n      }\n    }\n  }, []);\n\n  return (\n    <Router>\n      <Routes>\n        {/* Home Route */}\n        <Route \n          path=\"/\" \n          element={<Home />} \n        />\n\n        {/* Login Route */}\n        <Route \n          path=\"/login\" \n          element={\n            auth.isAuthenticated ? (\n              // Redirect authenticated users to their dashboard\n              <Navigate \n                to={`/${auth.role.toLowerCase()}/dashboard`} \n                replace \n              />\n            ) : (\n              <Login setAuth={setAuth} />\n            )\n          } \n        />\n        \n        {/* Admin Dashboard Route */}\n        <Route \n          path=\"/admin/dashboard\" \n          element={\n            <ProtectedRoute \n              requiredRole=\"ADMIN\" \n              userRole={auth.role} \n              isAuthenticated={auth.isAuthenticated}\n            >\n              <AdminDashboard auth={auth} setAuth={setAuth} onLogout={handleLogout} />\n            </ProtectedRoute>\n          } \n        />\n        \n        {/* Doctor Dashboard Route */}\n        <Route \n          path=\"/doctor/dashboard\" \n          element={\n            <ProtectedRoute \n              requiredRole=\"DOCTOR\" \n              userRole={auth.role} \n              isAuthenticated={auth.isAuthenticated}\n            >\n              <DoctorDashboard auth={auth} setAuth={setAuth} onLogout={handleLogout} />\n\n            </ProtectedRoute>\n          } \n        />\n        \n        {/* Patient Dashboard Route */}\n        <Route \n          path=\"/patient/dashboard\" \n          element={\n            <ProtectedRoute \n              requiredRole=\"PATIENT\" \n              userRole={auth.role} \n              isAuthenticated={auth.isAuthenticated}\n            >\n              <PatientDashboard auth={auth} setAuth={setAuth} onLogout={handleLogout} />\n\n            </ProtectedRoute>\n          } \n        />\n        {/* Catch all route - redirect to home */}\n        <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}