{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst credentials = {\n  admin: {\n    username: \"admin\",\n    password: \"admin123\"\n  },\n  patient: {\n    username: \"patient\",\n    password: \"patient123\"\n  },\n  doctor: {\n    username: \"doctor\",\n    password: \"doctor123\"\n  }\n};\nconst Login = ({\n  setAuth\n}) => {\n  _s();\n  const [role, setRole] = useState(\"admin\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const handleLogin = () => {\n    const user = credentials[role];\n    if (user && user.username === username && user.password === password) {\n      setAuth({\n        isAuthenticated: true,\n        role,\n        username\n      });\n      setError(\"\");\n    } else {\n      setError(\"Invalid username or password\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(Login, \"B2Gv+jZWViYgE5Fkqg8bzn7ge4o=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","Fragment","_Fragment","jsxDEV","_jsxDEV","credentials","admin","username","password","patient","doctor","Login","setAuth","_s","role","setRole","setUsername","setPassword","error","setError","handleLogin","user","isAuthenticated","_c","$RefreshReg$"],"sources":["W:/Medic-React/my-app/src/components/Login.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst credentials = {\r\n  admin: { username: \"admin\", password: \"admin123\" },\r\n  patient: { username: \"patient\", password: \"patient123\" },\r\n  doctor: { username: \"doctor\", password: \"doctor123\" },\r\n};\r\n\r\nconst Login = ({ setAuth }) => {\r\n  const [role, setRole] = useState(\"admin\");\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const handleLogin = () => {\r\n    const user = credentials[role];\r\n    if (user && user.username === username && user.password === password) {\r\n      setAuth({ isAuthenticated: true, role, username });\r\n      setError(\"\");\r\n    } else {\r\n      setError(\"Invalid username or password\");\r\n    }\r\n  };\r\n\r\n  return <></>;\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,WAAW,GAAG;EAClBC,KAAK,EAAE;IAAEC,QAAQ,EAAE,OAAO;IAAEC,QAAQ,EAAE;EAAW,CAAC;EAClDC,OAAO,EAAE;IAAEF,QAAQ,EAAE,SAAS;IAAEC,QAAQ,EAAE;EAAa,CAAC;EACxDE,MAAM,EAAE;IAAEH,QAAQ,EAAE,QAAQ;IAAEC,QAAQ,EAAE;EAAY;AACtD,CAAC;AAED,MAAMG,KAAK,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC7B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,OAAO,CAAC;EACzC,MAAM,CAACO,QAAQ,EAAES,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,QAAQ,EAAES,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMoB,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,IAAI,GAAGhB,WAAW,CAACS,IAAI,CAAC;IAC9B,IAAIO,IAAI,IAAIA,IAAI,CAACd,QAAQ,KAAKA,QAAQ,IAAIc,IAAI,CAACb,QAAQ,KAAKA,QAAQ,EAAE;MACpEI,OAAO,CAAC;QAAEU,eAAe,EAAE,IAAI;QAAER,IAAI;QAAEP;MAAS,CAAC,CAAC;MAClDY,QAAQ,CAAC,EAAE,CAAC;IACd,CAAC,MAAM;MACLA,QAAQ,CAAC,8BAA8B,CAAC;IAC1C;EACF,CAAC;EAED,oBAAOf,OAAA,CAAAF,SAAA,mBAAI,CAAC;AACd,CAAC;AAACW,EAAA,CAjBIF,KAAK;AAAAY,EAAA,GAALZ,KAAK;AAmBX,eAAeA,KAAK;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}